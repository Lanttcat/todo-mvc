{"version":3,"sources":["app.module.scss","components/task-tools/index.module.scss","components/task-input/index.module.scss","components/header/index.tsx","constants/wording.ts","states/atoms/todo.ts","states/selectors/todo.ts","components/task-input/index.tsx","components/task-list/index.tsx","constants/task.ts","components/task-tools/index.tsx","components/icon/index.tsx","App.tsx","reportWebVitals.ts","index.tsx","components/task-list/index.module.scss"],"names":["module","exports","Header","en","todoListState","atom","key","default","todoListSelector","selector","get","TaskInput","useState","task","setTask","useRecoilState","setTodoList","todoList","useRecoilValue","className","styles","inputWrapper","placeholder","type","input","value","onChange","event","target","onKeyPress","newTask","id","Date","now","createdAt","content","status","title","React","TaskList","tasks","onRemoveTask","onComplete","list","map","x","item","onClick","href","role","icon","cn","done","close","ALL_FILTER","TaskTools","leftCount","onFilter","onClearCompleted","showClear","tools","filter","name","defaultChecked","htmlFor","style","visibility","clear","Icon","props","App","activeTask","showTaskList","setShowTaskList","setFilter","useEffect","app","main","newList","newTasks","by","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5132840c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"app_app__3mk8F\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tools\":\"task-tools_tools__34GGG\",\"left\":\"task-tools_left__2XjsG\",\"clear\":\"task-tools_clear__2e3AM\",\"filter\":\"task-tools_filter__2IR9z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputWrapper\":\"task-input_inputWrapper__1Ss-_\",\"input\":\"task-input_input__GKep3\"};","import * as React from 'react'\n\nconst Header = () => {\n  return (\n    <header>\n      <h1>TODO MVC</h1>\n    </header>\n  )\n}\n\nexport default Header\n","export const en = {\n  TODO_INPUT_PLACEHOLDER: \"What needs to be done?\"\n}\n","import { atom } from \"recoil\";\n\nexport const todoListState = atom<Task[]>({\n  key: 'todos',\n  default: [],\n});\n","import { selector } from \"recoil\";\nimport { todoListState } from \"../atoms/todo\";\n\nexport const todoListSelector = selector({\n  key: 'todoListSelector',\n  get: ({get}) => get(todoListState)\n});\n","import * as React from \"react\";\n\nimport styles from \"./index.module.scss\"\nimport { en } from \"../../constants/wording\";\nimport { KeyboardEvent, useState } from \"react\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport { todoListState } from \"../../states/atoms/todo\";\nimport { todoListSelector } from \"../../states/selectors/todo\";\n\ninterface IProps {}\n\nconst TaskInput: React.FC<IProps> = () => {\n  const [task, setTask] = useState<string>('');\n  const [, setTodoList] = useRecoilState(todoListState);\n  const todoList = useRecoilValue(todoListSelector);\n  \n  const handleEnterPress = (event: KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === \"Enter\" && !!task) {\n      const newTask: Task = {\n        id: Date.now(), // use Date.now temporarily\n        createdAt: Date.now(),\n        content: task!,\n        status: 'active'\n      }\n      setTodoList([newTask, ...todoList])\n      setTask('')\n    }\n  }\n  \n  \n  return (\n    <div className={styles.inputWrapper}>\n      <input\n        placeholder={en.TODO_INPUT_PLACEHOLDER}\n        type=\"text\"\n        className={styles.input}\n        value={task}\n        onChange={(event) => setTask(event.target.value)}\n        onKeyPress={handleEnterPress}\n        title={'Input a new task'}\n      />\n    </div>\n  )\n}\n\nexport default React.memo(TaskInput)\n","import * as React from 'react';\nimport { Icon } from '..';\nimport cn from \"classnames\"\n\nimport styles from './index.module.scss'\n\ninterface IProp {\n  tasks: Task[]\n  onRemoveTask: (task: Task) => void\n  onComplete: (task: Task) => void\n}\n\n\nconst TaskList: React.FC<IProp> = ({tasks, onRemoveTask, onComplete}) => {\n  const renderTaskItem = (task: Task) => {\n    return (\n      <div key={task.id} className={styles.item}>\n        <a\n          title={`Complete ${task.content} task`}\n          className={styles.status}\n          onClick={() => onComplete(task)}\n          href='/#'\n          role=\"button\">\n          {\n            task.status === 'done' &&\n            <Icon type='seleted' className={styles.icon} />\n          }\n        </a>\n        <p className={cn(styles.content, {[styles.done]: task.status === 'done'})}>\n          {task.content}\n        </p>\n        <a\n          href='/#'\n          title={`Remove ${task.content} task`}\n          className={styles.close}\n        >\n          <Icon role=\"remove-todo-item\" type='close' className={styles.icon} onClick={() => onRemoveTask(task)}/>\n        </a>\n      </div>\n    )\n  }\n  return (\n    <div className={styles.list}>\n      { tasks.map((x) => renderTaskItem(x))}\n    </div>\n  )\n}\n\nexport default React.memo(TaskList)\n","export const ALL_FILTER: taskFilterType[] = ['all', 'done', 'active']\n","import * as React from \"react\";\n\nimport styles from './index.module.scss'\nimport { ALL_FILTER } from \"../../constants/task\";\n\ninterface IProps {\n  leftCount: number\n  showClear: boolean\n  onFilter: (by: taskFilterType) => void\n  onClearCompleted: () => void\n}\n\nconst TaskTools: React.FC<IProps> = ({leftCount, onFilter, onClearCompleted, showClear}) => {\n  return (\n    <div className={styles.tools}>\n      <span>\n        {leftCount} items left\n      </span>\n      <p className={styles.filter}>\n        {\n          ALL_FILTER.map((x) => (\n            <span key={x}>\n              <input onClick={() => onFilter(x)} type=\"radio\" name='filter' id={x} defaultChecked={x === 'all'}/>\n              <label key={x} htmlFor={x} title={`filter task by status is ${x}`}>{x}</label>\n            </span>\n          ))\n        }\n      </p>\n      <button title='Clear completed' style={{visibility: showClear ? 'unset' : 'hidden'}} className={styles.clear} onClick={onClearCompleted}>Clear completed</button>\n    </div>\n  )\n}\n\nexport default React.memo(TaskTools)\n","import * as React from \"react\"\nimport cn from \"classnames\"\n\ninterface IProps {\n  type: string\n  className?: string\n  onClick?: (e?: React.MouseEvent<HTMLSpanElement>) => void\n  role?: string\n}\n\nconst Icon: React.FC<IProps> = (props: IProps) => {\n  const handleClick = (event: React.MouseEvent<HTMLSpanElement>) => {\n    props.onClick && props.onClick(event)\n  }\n  \n  return (\n    <span\n      className={cn(\"iconfont\", `icon${props.type}`, props.className)}\n      onClick={handleClick}\n      role={props.role}\n    />\n  )\n}\n\nexport default Icon\n","import React, { useEffect, useState } from 'react';\nimport './app.module.scss';\nimport { Header, TaskInput, TaskList, TaskTools } from \"./components\";\nimport { todoListSelector } from \"./states/selectors/todo\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\n\nimport styles from \"./app.module.scss\"\nimport { todoListState } from \"./states/atoms/todo\";\n\nfunction App() {\n  const todoList = useRecoilValue(todoListSelector);\n  const [, setTodoList] = useRecoilState(todoListState);\n  const activeTask = todoList.filter(x => x.status !== 'done')\n  const [showTaskList, setShowTaskList] = useState<Task[]>([])\n  const [filter, setFilter] = useState<taskFilterType>('all')\n  \n  useEffect(() => {\n    if (filter === 'all') {\n      setShowTaskList(todoList)\n    }\n    if (filter === 'done') {\n      setShowTaskList(todoList.filter(x => x.status === 'done'))\n    }\n    if (filter === 'active') {\n      setShowTaskList(todoList.filter(x => x.status === 'active'))\n    }\n  }, [filter, todoList])\n  \n  const handleTaskComplete = (task: Task) => {\n    const newList: Task[] = todoList.map(x => {\n      if (x.id === task.id) {\n        return  {...task, ...{ status: 'done'}}\n      }\n      return x\n    })\n    setTodoList([...newList])\n  }\n  \n  const handleRemoveTask = (task: Task) => {\n    const newTasks = todoList.filter(x => x.id !== task.id)\n    setTodoList(newTasks)\n  }\n  \n  const handleTaskFilter = (by: taskFilterType) => {\n    setFilter(by)\n  }\n  \n  const handleClearCompleted = () => {\n    setTodoList(todoList.filter(x => x.status === 'active'))\n  }\n  \n  return (\n    <div className={styles.app}>\n      <Header />\n      <main className={styles.main}>\n        <TaskInput />\n        <TaskList tasks={showTaskList} onComplete={handleTaskComplete}  onRemoveTask={handleRemoveTask}/>\n        <TaskTools\n          onFilter={handleTaskFilter}\n          leftCount={activeTask.length}\n          onClearCompleted={handleClearCompleted}\n          showClear={activeTask.length !== todoList.length}\n        />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { RecoilRoot } from 'recoil';\n\n// TODO: [yixing] remove StrictMode\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <App />\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"task-list_list__o-xvb\",\"item\":\"task-list_item__vmQ81\",\"content\":\"task-list_content__cxhBm\",\"done\":\"task-list_done__2xfdN\",\"status\":\"task-list_status__XkAyM\",\"close\":\"task-list_close__pumB4\",\"icon\":\"task-list_icon__3jlru\"};"],"sourceRoot":""}